{% block styles %}
  {{ "guide.css" | asset_url | stylesheet_tag }}
{% endblock %}
{% block page-class %}pg-usage{% endblock %}

{% block header %}
  {% include "guide/header" %}
  <nav class="horizontal-nav horizontal-nav--guide row">
    <p class="trigger"><a href="#sections" class="js-reveal">Sections</a></p>
    <ul class="collapse" id="sections">
      <li><a href="#howto">How to use</a></li>
      <li><a href="#setup">Setup</a></li>
      <li><a href="#structure">Project structure</a></li>
      <li><a href="#markup">Markup</a></li>
      <li><a href="#css">CSS</a></li>
      <li><a href="#helpers">Helpers</a></li>
      <li><a href="#js">Javascript</a></li>
      <li><a href="#compatibility">Compatibility</a></li>
      <li><a href="#support">Support</a></li>
    </ul>
  </nav>
{% endblock %}

{% block content %}
<header class="row">
  <h1>Usage</h1>

  <p class="lead">Hey! Welcome to our living style guide, created by Live Wires. Live Wires is a simple design framework that allows you to create grey-box wireframes and responsive prototypes in <abbr>HTML</abbr>, Sass, &amp; CoffeeScript. Make this guide your own and rewrite the content here so it fits your project.</p>

  <p>Today we stop making trash and start building a living, breathing idea that will look and act the way it was imagined.</p>
</header>

<section class="row" id="howto">
  <h2>How do I use this guide?</h2>
  <hr>
  <p>The guide breaks down the setup, configuration, and application of Live Wire. Use it as a reference for building your wireframes, creating a prototype, and then building upon your site or app&rsquo;s design.</p>
</section>

<section class="row" id="setup">
  <h2>Setup</h2>
  <hr>
  <p>Because Live Wires is built using Sass and CoffeeScript, you&rsquo;re going to need a preprocesser application to render your code into CSS and JavaScript.</p>

  <p><a href="http://mixture.io">Mixture</a> is above and beyond the best tool we&rsquo;ve used for this. It&rsquo;s polished, well documented, and the simplest to set up. The only other software you need is a text editor and browser.</p>

  <p>There are a number of pretty good alternatives like <a href="https://incident57.com/codekit/">CodeKit</a> or <a href="http://alphapixels.com/prepros/">Prepros</a> that will also work just fine.</p>

  <hr>

  <h3>Easy</h3>

  <p>This method requires little more than installing <a href="http://mixture.io">Mixture</a>:</p>

  <dl>
    <dt>Step 1</dt>
    <dd>Install <a href="http://mixture.io#download">Mixture</a>.</dd>
    <dt>Step 2</dt>
    <dd>Choose Live Wires from the included boilerplates list.</dd>
    <dt>Step 3</dt>
    <dd>Save the project and start coding. That&rsquo;s it.</dd>
    <dd><figure><img src="{{ "livewires/mixture.png" | asset_url }}" alt="Mixture screenshot displaying Live Wires in the boilerplate list." /></figure></dd>
  </dl>

  <p>Once you&rsquo;re up and running, there are a few settings you may want to customize in in the <code>mixture.json</code> and <code>/models/_global.json</code> files. Read more about that on the <a href="http://docs.mixture.io">Mixture site</a>.</p>

  <hr>

  <h3>Standard</h3>

  <p>If you&rsquo;re using a different preprocessor, you have a few more steps, but they&rsquo;re pretty easy too:</p>

  <dl>
    <dt>Step 1</dt>
    <dd>Create a folder for your project.</dd>
    <dt>Step 2</dt>
    <dd><a href="https://github.com/louderthanten/livewires/archive/master.zip">Download</a> or clone Live Wires from the <a href="https://github.com/louderthanten/livewires">GitHub repository</a> and save the contents in your project folder.</dd>
    <dt>Step 3</dt>
    <dd>Point your preferred Sass &amp; CoffeeScript preprocessor app to the project folder.</dd>
    <dt>Step 4</dt>
    <dd>Configure the preprocessor to compile <code>/source/scss/</code> to <code>/httpdocs/css/</code> and <code>/source/coffee/</code> to <code>/httpdocs/js/</code>.</dd>
    <dt>Step 5</dt>
    <dd>Run the preprocesser and start coding.</dd>
  </dl>

  <aside class="callout callout--clear">
    <div class="content subtle">
      <p><strong>Note:</strong> You may also want to setup a local <a href="">MAMP</a> server for this types of install so you can use PHP or other server-side languages to build your templates. In these cases, you&rsquo;ll want to point your server to the <code>/httpdocs/</code> directory.</p>
    </div>
  </aside>



  <hr />

  <h3>Advanced</h3>

  <p>For power users that prefer the command line, we&rsquo;ve setup a basic Gruntfile in the root directory to get you up and running. It includes the following tasks:</p>

  <ul>
    <li><a href="http://sass-lang.com/">Sass</a> compilation</li>
    <li><a href="http://CoffeeScript.org">CoffeeScript</a> compilation</li>
    <li><a href="https://github.com/mishoo/UglifyJS">Uglify</a> (compresses JavaScript)</li>
    <li><a href="https://github.com/ai/autoprefixer">Autoprefixer</a> (automatically adds vendor prefixes to your <abbr>CSS</abbr>)</li>
    <li><a href="http://livereload.com/">LiveReload</a> (auto-reloads your browser on each save. You&rsquo;ll also need an appropriate <a href="http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-">browser extension</a>)</li>
  </ul>

      <p>To get started, you&rsquo;ll need to:</p>
      <dl>
        <dt>Step 1</dt>
        <dd>Install <a href="http://nodejs.org/">Node.js</a>.</dd>
        <dt>Step 2</dt>
        <dd>Install <a href="http://gruntjs.com">Grunt</a> by typing <code>npm install -g grunt-cli</code> in Terminal.</dd>
        <dt>Step 3</dt>
        <dd>Create a folder for your project.</dd>
        <dt>Step 4</dt>
        <dd><a href="https://github.com/louderthanten/livewires/archive/master.zip">Download</a> or clone Live Wires from the <a href="https://github.com/louderthanten/livewires">GitHub repository</a> and save the contents in your project folder.</dd>
        <dt>Step 5</dt>
        <dd>Navigate to your project folder in Terminal and run <code>npm install</code>.</dd>
        <dt>Step 6</dt>
        <dd>Start the prepocessors by running <code>grunt server</code> in the Terminal.</dd>
      </dl>



  <aside class="callout callout--clear">
    <div class="content subtle">
      <p><strong>Note:</strong> You&rsquo;ll need to run <code>grunt server</code> each time you work on the project.</p>
      <p>You can learn more about configuring Grunt and find more plugins and documentation on the <a href="http://gruntjs.com">Grunt site</a>.</p>
    </div>
  </aside>

  <p class="more"><a href="#header">To top</a></p>
</section>

<section class="row" id="structure">
  <h2>Project structure</h2>
  <hr>

  <p>One of the core philosphies behind Live Wires is stay out of the way as much as we can. We don&rsquo;t want to impose any code standards or force you into a little box. Saying that, here are some guidelines that that will help you get started with Live Wires more easily.</p>

  <p>Here&rsquo;s how a Live Wires project is organized:</p>

  <dl>
    <dt><code>/httpdocs/</code></dt>
    <dd>This is where all compiled static assets live. Drop your images and font files here. This is also where all Sass, CoffeeScript, and JavaScript is combined, compiled, and minified for production use. <strong>Don&rsquo;t edit these <abbr>CSS</abbr> and <abbr>JS</abbr> files if you&rsquo;re using Sass and CoffeeScript. Your changes will be overwritten by the preprocessor</strong>.</dd>

    <dt><code>/source/</code></dt>
    <dd>This contains all of the pre-compiled Sass, CoffeeScript, and JavaScript plugin files. This is where you will write your <abbr>CSS</abbr> and JavaScript.</dd>

    <dt><code>/httpdocs/docs/</code></dt>
    <dd>An isolated and untouched version of this guide and examples.</dd>

    <dt><code>/httpdocs/guide/</code> <small>(<code>/templates/guide/</code> in Mixture)</small></dt>
    <dd>The project style guide. This begins as a Live Wires reference, but becomes your project&rsquo;s style guide as you begin writing <abbr>CSS</abbr>. Hint: Use the guide as a tool to design your elements and components.</dd>

  </dl>

  <aside class="callout callout--clear">
    <div class="content subtle">
      <h3>Mixture specific</h3>
      <dl>
        <dt><code>/templates/</code></dt>
        <dd>This is where your <a href="http://docs.mixture.io/templates">site templates</a> reside. Templates for this guide can be found in the <code>guide</code> sub-folder.</dd>

        <dt><code>/models/</code></dt>
        <dd>Contains Mixture&rsquo;s handy <a href="http://docs.mixture.io/models">model files</a>. We&rsquo;ve added one with some global variables to get you started.</dd>

        <dt><code>mixture.json</code></dt>
        <dd>Your <a href="http://docs.mixture.io/mixture">Mixture settings</a>.</dd>
      </dl>
    </div>
  </aside>

  <p class="more"><a href="#header">To top</a></p>
</section>



<section class="row" id="markup">
  <h2 id="markup">Markup</h2>
  <hr>
  <p>We use standard <abbr>HTML5</abbr> for markup. We try not to impose any markup styles or conventions, but do recommend <a href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/">BEM syntax</a> to name your classes. This sets an easy standard for others to adopt and keeps the library tight, modular, and free of specificity issues.</p>

  <p>Here&rsquo;s the basic syntax:</p>

  <div class="code">
    <pre class="language-scss"><code>.block {} /* A component or module */
.block__element {} /* A descendent of that module */
.block--modifier {} /* A modified or alternate version of the module */</code></pre>
  </div>

  <p>Read more about <a href="http://nicolasgallagher.com/about-html-semantics-front-end-architecture/">BEM syntax</a>.</p>

  <h3>&lsquo;Blanking out&rsquo; text</h3>
  <p>One of our favourite Live Wires features involves the ability to blank out text. This lets us design around actual content. However, if we want our team or client to focus on the layout or hierarchy of our wireframes and prototypes, we can hide the text so they won&rsquo;t get distracted. To blank out paragraphs and list items, simply add a <code>.content</code> class to its parent element.</p>

  <p>Note: <code>/source/scss/settings/_livewires.scss</code> must be included in the <code>/source/scss/app.scss</code> file for this to work.</p>

  <div class="code">
    <h4>Markup example</h4>
    <pre class="language-markup line-numbers"><code>    &lt;div class="content"&gt;
      &lt;p&gt;This text would be blanked out.&lt;/p&gt;
    &lt;/div&gt;</code></pre>
  </div>

  <aside class="callout callout--clear">
    <div class="subtle content">
      <h3>Mixture specific</h3>
      <p>The Mixture version of Live Wires takes advantage of the <a href="http://docs.mixture.io/templates">Liquid templating</a> language for better template construction.</p>
    </div>
  </aside>

  <p class="more"><a href="#header">To top</a></p>
</section>

<section class="row" id="css">

  <h2>CSS</h2>
  <hr>

  <p>All of the styles are written using <a href="http://sass-lang.com/">Sass</a>. All source files can be found in <code>/source/scss/</code>. We&rsquo;ve set up a few basic starter styles to get you going, but encourage you to go through each file and customize it. Using this style guide as your own is a fine way to flesh out a UI system for every project.</p>

  <h3><abbr>SCSS</abbr> file structure</h3>

  <h4>/source/scss/</h4>
  <p>This file contains all of the styles in the project. The guide and your own templates both share the same <abbr>CSS</abbr>. What this means is that whenever you make changes to your styles, they will be reflected on your style guide and on your wireframe. This, here, guide becomes your own as you shape your templates. We normally use the guide to style each element, component, and module in our projects.</p>

  <dl>
    <dt><code>app.scss</code></dt>
    <dd>This generates your projects main <abbr>CSS</abbr> file into <code>/httpdocs/css/app.css</code>. It has three includes:</dd>

    <dt><code>@import "settings/_color";</code></dt>
    <dd>Pulls in your colour variables for easy experimentation between colour schemes.</dd>

    <dt><code>@import "settings/_includes";</code></dt>
    <dd>Pulls in all the elements, components, and modules you want to include in your project.</dd>

    <dt><code>@import "settings/_livewires";</code></dt>
    <dd>Pulls in Live Wires styles which blank out the text inside of any element with a <code>.content</code> class in your <abbr>HTML</abbr>. Remove it to get rid of the blank text feature.</dd>
  </dl>

  <h4>/source/scss/settings/</h4>
  <p>Contains the project variables, mixins, and other things that make Sass so powerful. Here&rsquo;s a taste of what you can do:</p>

  <dl>
    <dt><code>_variables.scss</code></dt>
    <dd>Set most global variables in here. You can set things like base typographic settings, default corner radius, breakpoint widths, and grid units.</dd>

    <dt><code>_colors.scss</code></dt>
    <dd>We keep our colour variables separate so we can easily experiement with multiple colour schemes.</dd>

    <dt><code>_includes.scss</code></dt>
    <dd>Use this to include or exclude the sections you want in your project. We made everything modular, so you can use as much or as little as you like.</dd>

    <dt><code>_livewires.scss</code></dt>
    <dd>Blanks out text inside of any element with a <code>.content</code> class in your <abbr>HTML</abbr>. Include this when presenting wireframes to clients or your team to focus their attention on layout and flow, rather than textual content. But hark the broken record: get your content in before you get into design.</dd>

    <dt><code>_font-faces.scss</code></dt>
    <dd>Add any font or icon @font-face includes to this file.</dd>

    <dt><code>_helpers.scss</code></dt>
    <dd>Some non-semantic classes and %placeholders to help debug and position your elements. <a href="#helpers">See what&rsquo;s included below</a>.</dd>

    <dt><code>_mixins.scss</code> &amp; <code>_functions.scss</code></dt>
    <dd>These include powerful enhacements to help save time. Have a browse to see what&rsquo;s available and how they work.</dd>
  </dl>

  <h4>/sources/scss/elements/</h4>
  <p>Stand-alone elements and small peices that make up components. <em>e.g. paragraphs, headings, form fields</em></p>

  <h4>/sources/scss/components/</h4>
  <p>The reusable pieces that consist of groups of elements. <em>e.g. callouts, pagination, code blocks</em></p>

  <h4>/sources/scss/modules/</h4>
  <p>Major chunks that make up the main sections of a template. They often contain components and global elements, and are often used once per page. <em>e.g. headers, footers, layout modules</em></p>

  <h4>/sources/scss/pages/</h4>
  <p>Page-specific styles. We recommend keeping larger files in this section out of the main stylesheet and only calling them on their respective pages.</p>

  <h4>/sources/scss/theme/</h4>
  <p>This contains all colour-related styles. We&rsquo;ve kept all the color assignments separate from structural styles to make theming easier, faster, and less prone to errors.</p>

  <h4>/sources/scss/vendor/</h4>
  <p>Drop any third-party styles in here. We don&rsquo;t touch them, so they can be updated in the future.</p>

  <p class="more"><a href="#header">To top</a></p>
</section>

<section class="row" id="helpers">
  <h2>Helpers</h2>
  <hr>
  <p>We have some handy little helpers to make your life a little easer. Check out <code>/source/scss/settings/_helpers.scss</code> for more examples.</p>

  <dl>
    <dt><code>.hidden</code></dt>
    <dd>Hide stuff from screenreaders and browsers.</dd>

    <dt><code>.visuallyhidden</code></dt>
    <dd>Hide stuff from browsers only.</dd>

    <dt><code>.invisible</code></dt>
    <dd>Hide but maintain layout.</dd>

    <dt><code>.pull-right</code></dt>
    <dd>Float object to the right.</dd>

    <dt><code>.pull-left</code></dt>
    <dd>Float object to the left.</dd>

    <dt><code>.text-right</code></dt>
    <dd>Right-aligned text.</dd>

    <dt><code>.text-left</code></dt>
    <dd>Left-aligned text.</dd>

    <dt><code>.text-center</code></dt>
    <dd>Centred text.</dd>
  </dl>

  <p>Use the <abbr>SCSS</abbr> <code>@extend</code> method on these, like:</p>

  <dl>
    <dt><code>@extend %group;</code></dt>
    <dd>Add the <a href="http://nicolasgallagher.com/micro-clearfix-hack/">clearfix hack</a> to containing element (adding a class of <code>clearfix</code> or <code>group</code> to your <abbr>HTML</abbr> element also works but isn&rsquo;t as cool).</dd>

    <dt><code>@extend %vertical-align;</code></dt>
    <dd>Magically <a href="http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css/">verically align</a> objects inside of other objects.</dd>
  </dl>

  <p class="more"><a href="#header">To top</a></p>
</section>

<section class="row" id="js">
  <h2>Javascript</h2>
  <hr>
  <p>We use <a href="http://CoffeeScript.org/">CoffeScript</a> to write our scripts. Its a powerful and easy-to-learn JavaScript pre-processor to help make scripting more efficient and less error-prone.</p>

  <p>If you prefer vanilla JavaScript, you can remove the <code>/source/coffee</code> folder and simply edit the compiled .js files in <code>/httpdocs/js/</code>.</p>

  <p>Like our <abbr>CSS</abbr> and <abbr>HTML</abbr>, we try to keep our JavaScript modular so you can use only what you need. All the CoffeeScript components are in <code>/source/coffee/components</code> and will compile automatically.</p>

  <h3>Third-party scripts</h3>
  <p>We organize all third-party scripts like jQuery plugins in the <code>/source/vendor/</code> folder.</p>

  <aside class="callout callout--clear">
    <div class="content subtle">
      <h3>Mixture specific</h3>
      <p>You can include and exclude the scripts you want in your project by editing <code>/source/coffee/app.mix.js</code> and <code>/source/vendor/vendor.mix.js</code> following the syntax in those files.</p>
    </div>
  </aside>

  <p class="more"><a href="#header">To top</a></p>
</section>

<section class="row" id="compatibility">

  <h2>Compatibility</h2>
  <hr>
  <p>We support all modern browsers including Internet Explorer 9 and up. If you need to support IE8 or anything earlier, you can solve most incompatilibilites by switching to jQuery 1.x and including the following polyfills:</p>

  <ul>
    <li><a href="https://code.google.com/p/html5shiv/">html5shiv</a></li>
    <li><a href="https://github.com/scottjehl/Respond">Respond.js</a></li>
    <li><a href="https://github.com/chuckcarpenter/REM-unit-polyfill">REM-unit-polyfill</a></li>
    <li><a href="http://selectivizr.com/">Selectivizr</a></li>
  </ul>

  <p>We also use Auto-prefixer to write any necessary vendor prefixes for us. You&rsquo;ll want to adjust the settings in mixture.json or Gruntfile.js for other browsers.</p>

  <p class="more"><a href="#header">To top</a></p>

</section>

<section class="row" id="support">
  <h2>Support</h2>
  <hr>

  <p>Submit your bug reports, pull requests, and questions to <a href="https://github.com/louderthanten/livewires/issues">GitHub</a>.</p>
  <p>Other questions? Visit <a href="http://livewires.io">Live Wires</a> for more info.</p>

  <p class="more"><a href="#header">To top</a></p>
</section>

{% endblock %}
